#!/bin/bash


# =========================== #
# ======== ARGUMENTS  ======= #
# =========================== #

if [ "$1" == "--help" ]; then
    # Display help message
    echo "C++ Project Structure Creation Script"
    echo "Usage: $0 [--vscode]"
    echo
    echo "This script creates a basic C++ project structure in the current directory."
    echo
    echo "Options:"
    echo "  --vscode   Open VS Code after creating the project structure."
    echo
    echo "Project Structure:"
    echo "  src/      - Source code (.cpp)"
    echo "  include/  - Header files (.h)"
    echo "  lib/      - External libraries"
    echo "  bin/      - Compiled binaries"
    echo "  test/     - Test files"
    echo "  doc/      - Documentation"
    echo
    echo "Placeholder Files:"
    echo "  src/main.cpp            - Main source file"
    echo "  include/project.h       - Project header file"
    echo "  test/test_main.cpp      - Test main source file"
    echo "  README.md               - Project README file"
    echo
    echo "Example:"
    echo "  $0"
    echo "  $0 --vscode"
    echo
    exit 0
fi

# ================================ #
# ======== README CONTENT  ======= #
# ================================ #

# Generate README.md
readme_content="# Getting Started

## Project Structure

---

The following project structure is recommended for C++ projects:

\`\`\`
c++_project/
├── bin/
├── doc/
├── include/
├── lib/
├── src/
└── test/
\`\`\`

Here's a brief description of each directory:

- \`bin\`: Compiled binaries
- \`doc\`: Documentation files
- \`include\`: Header files
- \`lib\`: External libraries
- \`src\`: Source code
- \`test\`: Test files


## Essential Configuration Files for C++ Development in Visual Studio Code

---

Visual Studio Code (VS Code) has emerged as a popular choice for C++ development due to its cross-platform compatibility, lightweight nature, and vast extensibility. To effectively utilize VS Code for C++ projects, three crucial configuration files play a central role in shaping the development experience:

> Reference: [https://code.visualstudio.com/docs/cpp/config-linux#_add-hello-world-source-code-file](https://code.visualstudio.com/docs/cpp/config-linux#_add-hello-world-source-code-file)

### 1. tasks.json: Orchestrating Build Processes

---

The \`tasks.json\` file serves as the command center for building C++ projects in VS Code. It defines build tasks that encapsulate the instructions for compiling, linking, and generating executable files. These tasks can be invoked manually or triggered automatically through keyboard shortcuts or context menus.

Key properties within \`tasks.json\` include:

- \`taskName\`: Identifies the task's name for easy reference.

- \`command\`: Specifies the build command, typically involving the compiler or build system.

- \`args\`: Defines additional arguments passed to the build command.

- \`workingDirectory\`: Sets the working directory for the build process.

- \`problemMatcher\`: Detects and displays build errors and warnings.

Here's an example of \`tasks.json\` :

\`\`\`json
{
  \"version\": \"2.0.0\",
  \"tasks\": [
    {
      \"type\": \"shell\",
      \"label\": \"C/C++: g++ build active file\",
      \"command\": \"/usr/bin/g++\",
      \"args\": [\"-g\", \"\${file}\", \"-o\", \"\${fileDirname}/\${fileBasenameNoExtension}\"],
      \"options\": {
        \"cwd\": \"/usr/bin\"
      },
      \"problemMatcher\": [\"$gcc\"],
      \"group\": {
        \"kind\": \"build\",
        \"isDefault\": true
      },
      \"detail\": \"Task generated by Debugger.\"
    }
  ]
}
\`\`\`

### 2. launch.json: Debugging with Ease

---

Debugging is an essential part of software development, and \`launch.json\` empowers VS Code to seamlessly integrate with debuggers for C++ projects. It defines launch configurations that specify the debugging environment, including the compiler, debugger type, and target executable.

Key properties within \`launch.json\` include:

- \`name\`: Identifies the launch configuration for easy selection.

- \`type\`: Specifies the debugger type, such as \`cppdbg\` for Microsoft C++ debugging.

- \`request\`: Defines the type of debugging session, such as \`launch\` for starting a new process or \`attach\` for connecting to an existing one.

- \`program\`: Indicates the path to the executable file to debug.

- \`args\`: Defines additional arguments passed to the executable.

- \`env\`: Sets environment variables for the debugging process.

Here's an example of \`launch.json\` :

\`\`\`json
{
  \"version\": \"0.2.0\",
  \"configurations\": [
    {
      \"name\": \"(gdb) Launch\",
      \"type\": \"cppdbg\",
      \"request\": \"launch\",
      \"program\": \"\${workspaceFolder}/\${fileBasenameNoExtension}\",
      \"args\": [],
      \"stopAtEntry\": false,
      \"cwd\": \"\${workspaceFolder}\",
      \"environment\": [],
      \"externalConsole\": false,
      \"MIMode\": \"gdb\",
      \"miDebuggerPath\": \"/usr/bin/gdb\"
    }
  ]
}
\`\`\`

### 3. c_cpp_properties.json: Configuring IntelliSense

IntelliSense is a powerful feature in VS Code that provides code completion, syntax highlighting, and error checking for C++ projects. The \`c_cpp_properties.json\` file governs IntelliSense behavior by configuring various aspects, including:

- \`compilerPath\`: Specifies the path to the C++ compiler.

- \`includePath\`: Defines the directories containing header files.

- \`cStandard\`: Sets the C++ language standard to use.

- \`cppStandard\`: Sets the C++ language standard to use.

- \`intelliSenseMode\`: Controls the level of IntelliSense assistance.

- \`includeDirectories\`: Specify additional directories for IntelliSense to search for header files.

- \`browse**\`: Defines paths to search for external libraries."

# =========================== #
# ========= SCRIPT  ========= #
# =========================== #

# Create project folder
mkdir c++_project
cd c++_project

# Create directories
mkdir -p src include lib bin test doc

# Create placeholder files
touch src/main.cpp
touch include/project.h
touch test/test_main.cpp

echo "$readme_content" > README.md

# Display success message
echo "C++ project structure created successfully!"

# Check if --vscode option is provided
if [ "$1" == "--vscode" ]; then
    # Check if code command is available (VS Code is installed)
    if command -v code &> /dev/null; then
        # Create .vscode folder
        mkdir .vscode

        # Create tasks.json with build folder in bin/
        echo "{
  \"tasks\": [
    {
      \"type\": \"cppbuild\",
      \"label\": \"C/C++: gcc build active file\",
      \"command\": \"/usr/bin/gcc\",
      \"args\": [
        \"-std=c++23\",
        \"-fdiagnostics-color=always\",
        \"-g\",
        \"\${file}\",
        \"-o\",
        \"\${workspaceFolder}/bin/\${fileBasenameNoExtension}\",
      ],
      \"options\": {
        \"cwd\": \"\${fileDirname}\"
      },
      \"problemMatcher\": [
        \"\$gcc\"
      ],
      \"group\": {
        \"kind\": \"build\",
        \"isDefault\": true
      },
      \"detail\": \"Task generated by Debugger.\"
    }
  ],
  \"version\": \"2.0.0\"
}
" > .vscode/tasks.json

        # Open VS Code
        code .
    else
        # Display error if VS Code is not installed
        echo "Error: Visual Studio Code is not installed. Please install it and try again."
        exit 1
    fi
fi
